/**
 * DRES Client API
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * The version of the OpenAPI document: 2.0.0-RC4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiClientSubmission from '../model/ApiClientSubmission';
import ErrorStatus from '../model/ErrorStatus';
import SuccessfulSubmissionsStatus from '../model/SuccessfulSubmissionsStatus';

/**
* Submission service.
* @module api/SubmissionApi
* @version 2.0.0-RC4
*/
export default class SubmissionApi {

    /**
    * Constructs a new SubmissionApi. 
    * @alias module:api/SubmissionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getApiV1Submit operation.
     * @callback module:api/SubmissionApi~getApiV1SubmitCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulSubmissionsStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to accept submissions
     * This has been the submission endpoint for version 1. Please refrain from using it and migrate to the v2 endpoint.
     * @param {Object} opts Optional parameters
     * @param {String} [collection] Collection identifier. Optional, in which case the default collection for the run will be considered.
     * @param {String} [item] Identifier for the actual media object or media file.
     * @param {String} [text] Text to be submitted. ONLY for tasks with target type TEXT. If this parameter is provided, it superseeds all athers.
     * @param {Number} [frame] Frame number for media with temporal progression (e.g., video).
     * @param {Number} [shot] Shot number for media with temporal progression (e.g., video).
     * @param {String} [timecode] Timecode for media with temporal progression (e.g,. video).
     * @param {String} [session] Session Token
     * @param {module:api/SubmissionApi~getApiV1SubmitCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulSubmissionsStatus}
     */
    getApiV1Submit(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'collection': opts['collection'],
        'item': opts['item'],
        'text': opts['text'],
        'frame': opts['frame'],
        'shot': opts['shot'],
        'timecode': opts['timecode'],
        'session': opts['session']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessfulSubmissionsStatus;
      return this.apiClient.callApi(
        '/api/v1/submit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV2SubmitByEvaluationId operation.
     * @callback module:api/SubmissionApi~postApiV2SubmitByEvaluationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessfulSubmissionsStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to accept submissions.
     * @param {String} evaluationId The ID of the evaluation the submission belongs to.
     * @param {module:model/ApiClientSubmission} apiClientSubmission 
     * @param {Object} opts Optional parameters
     * @param {String} [session] Session Token
     * @param {module:api/SubmissionApi~postApiV2SubmitByEvaluationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessfulSubmissionsStatus}
     */
    postApiV2SubmitByEvaluationId(evaluationId, apiClientSubmission, opts, callback) {
      opts = opts || {};
      let postBody = apiClientSubmission;
      // verify the required parameter 'evaluationId' is set
      if (evaluationId === undefined || evaluationId === null) {
        throw new Error("Missing the required parameter 'evaluationId' when calling postApiV2SubmitByEvaluationId");
      }
      // verify the required parameter 'apiClientSubmission' is set
      if (apiClientSubmission === undefined || apiClientSubmission === null) {
        throw new Error("Missing the required parameter 'apiClientSubmission' when calling postApiV2SubmitByEvaluationId");
      }

      let pathParams = {
        'evaluationId': evaluationId
      };
      let queryParams = {
        'session': opts['session']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessfulSubmissionsStatus;
      return this.apiClient.callApi(
        '/api/v2/submit/{evaluationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
