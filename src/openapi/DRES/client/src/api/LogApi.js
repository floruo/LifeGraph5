/**
 * DRES Client API
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * The version of the OpenAPI document: 2.0.0-RC4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorStatus from '../model/ErrorStatus';
import QueryEventLog from '../model/QueryEventLog';
import QueryResultLog from '../model/QueryResultLog';
import SuccessStatus from '../model/SuccessStatus';

/**
* Log service.
* @module api/LogApi
* @version 2.0.0-RC4
*/
export default class LogApi {

    /**
    * Constructs a new LogApi. 
    * @alias module:api/LogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postApiV2LogQueryByEvaluationId operation.
     * @callback module:api/LogApi~postApiV2LogQueryByEvaluationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts query logs from participants for the specified evaluation.
     * @param {String} evaluationId The evaluation ID.
     * @param {String} session Session Token
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryEventLog} [queryEventLog] 
     * @param {module:api/LogApi~postApiV2LogQueryByEvaluationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessStatus}
     */
    postApiV2LogQueryByEvaluationId(evaluationId, session, opts, callback) {
      opts = opts || {};
      let postBody = opts['queryEventLog'];
      // verify the required parameter 'evaluationId' is set
      if (evaluationId === undefined || evaluationId === null) {
        throw new Error("Missing the required parameter 'evaluationId' when calling postApiV2LogQueryByEvaluationId");
      }
      // verify the required parameter 'session' is set
      if (session === undefined || session === null) {
        throw new Error("Missing the required parameter 'session' when calling postApiV2LogQueryByEvaluationId");
      }

      let pathParams = {
        'evaluationId': evaluationId
      };
      let queryParams = {
        'session': session
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatus;
      return this.apiClient.callApi(
        '/api/v2/log/query/{evaluationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV2LogResultByEvaluationId operation.
     * @callback module:api/LogApi~postApiV2LogResultByEvaluationIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accepts result logs from participants  for the specified evaluation.
     * @param {String} evaluationId The evaluation ID.
     * @param {String} session Session Token
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryResultLog} [queryResultLog] 
     * @param {module:api/LogApi~postApiV2LogResultByEvaluationIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessStatus}
     */
    postApiV2LogResultByEvaluationId(evaluationId, session, opts, callback) {
      opts = opts || {};
      let postBody = opts['queryResultLog'];
      // verify the required parameter 'evaluationId' is set
      if (evaluationId === undefined || evaluationId === null) {
        throw new Error("Missing the required parameter 'evaluationId' when calling postApiV2LogResultByEvaluationId");
      }
      // verify the required parameter 'session' is set
      if (session === undefined || session === null) {
        throw new Error("Missing the required parameter 'session' when calling postApiV2LogResultByEvaluationId");
      }

      let pathParams = {
        'evaluationId': evaluationId
      };
      let queryParams = {
        'session': session
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuccessStatus;
      return this.apiClient.callApi(
        '/api/v2/log/result/{evaluationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
