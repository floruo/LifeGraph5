/**
 * DRES Client API
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * The version of the OpenAPI document: 2.0.0-RC4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiUser from '../model/ApiUser';
import ApiUserRequest from '../model/ApiUserRequest';
import ErrorStatus from '../model/ErrorStatus';
import LoginRequest from '../model/LoginRequest';
import SuccessStatus from '../model/SuccessStatus';

/**
* User service.
* @module api/UserApi
* @version 2.0.0-RC4
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteApiV2UserByUserId operation.
     * @callback module:api/UserApi~deleteApiV2UserByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified user. Requires ADMIN privileges
     * @param {String} userId User ID
     * @param {module:api/UserApi~deleteApiV2UserByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    deleteApiV2UserByUserId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteApiV2UserByUserId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v2/user/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV2Logout operation.
     * @callback module:api/UserApi~getApiV2LogoutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuccessStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears all user roles of the current session.
     * @param {Object} opts Optional parameters
     * @param {String} [session] Session Token
     * @param {module:api/UserApi~getApiV2LogoutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuccessStatus}
     */
    getApiV2Logout(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'session': opts['session']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SuccessStatus;
      return this.apiClient.callApi(
        '/api/v2/logout', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV2User operation.
     * @callback module:api/UserApi~getApiV2UserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information about the current user.
     * @param {module:api/UserApi~getApiV2UserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    getApiV2User(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v2/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV2UserByUserId operation.
     * @callback module:api/UserApi~getApiV2UserByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details of the user with the given id.
     * @param {String} userId User's UID
     * @param {module:api/UserApi~getApiV2UserByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    getApiV2UserByUserId(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getApiV2UserByUserId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v2/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiV2UserSession operation.
     * @callback module:api/UserApi~getApiV2UserSessionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current sessionId
     * @param {Object} opts Optional parameters
     * @param {String} [session] Session Token
     * @param {module:api/UserApi~getApiV2UserSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getApiV2UserSession(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'session': opts['session']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/api/v2/user/session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchApiV2UserByUserId operation.
     * @callback module:api/UserApi~patchApiV2UserByUserIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the specified user, if it exists. Anyone is allowed to update their data, however only ADMINs are allowed to update anyone.
     * @param {String} userId User ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiUserRequest} [apiUserRequest] 
     * @param {module:api/UserApi~patchApiV2UserByUserIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    patchApiV2UserByUserId(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUserRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling patchApiV2UserByUserId");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v2/user/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV2Login operation.
     * @callback module:api/UserApi~postApiV2LoginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets roles for session based on user account and returns a session cookie.
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginRequest} [loginRequest] 
     * @param {module:api/UserApi~postApiV2LoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    postApiV2Login(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v2/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postApiV2User operation.
     * @callback module:api/UserApi~postApiV2UserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new user, if the username is not already taken. Requires ADMIN privileges
     * @param {Object} opts Optional parameters
     * @param {module:model/ApiUserRequest} [apiUserRequest] 
     * @param {module:api/UserApi~postApiV2UserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiUser}
     */
    postApiV2User(opts, callback) {
      opts = opts || {};
      let postBody = opts['apiUserRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiUser;
      return this.apiClient.callApi(
        '/api/v2/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
