/**
 * DRES Client API
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * The version of the OpenAPI document: 2.0.0-RC4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiTaskGroup from './ApiTaskGroup';
import ApiTaskTemplate from './ApiTaskTemplate';
import ApiTaskType from './ApiTaskType';
import ApiTeam from './ApiTeam';
import ApiTeamGroup from './ApiTeamGroup';

/**
 * The ApiEvaluationTemplate model module.
 * @module model/ApiEvaluationTemplate
 * @version 2.0.0-RC4
 */
class ApiEvaluationTemplate {
    /**
     * Constructs a new <code>ApiEvaluationTemplate</code>.
     * @alias module:model/ApiEvaluationTemplate
     * @param id {String} 
     * @param name {String} 
     * @param taskTypes {Array.<module:model/ApiTaskType>} 
     * @param taskGroups {Array.<module:model/ApiTaskGroup>} 
     * @param tasks {Array.<module:model/ApiTaskTemplate>} 
     * @param teams {Array.<module:model/ApiTeam>} 
     * @param teamGroups {Array.<module:model/ApiTeamGroup>} 
     * @param judges {Array.<String>} 
     */
    constructor(id, name, taskTypes, taskGroups, tasks, teams, teamGroups, judges) { 
        
        ApiEvaluationTemplate.initialize(this, id, name, taskTypes, taskGroups, tasks, teams, teamGroups, judges);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, taskTypes, taskGroups, tasks, teams, teamGroups, judges) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['taskTypes'] = taskTypes;
        obj['taskGroups'] = taskGroups;
        obj['tasks'] = tasks;
        obj['teams'] = teams;
        obj['teamGroups'] = teamGroups;
        obj['judges'] = judges;
    }

    /**
     * Constructs a <code>ApiEvaluationTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiEvaluationTemplate} obj Optional instance to populate.
     * @return {module:model/ApiEvaluationTemplate} The populated <code>ApiEvaluationTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiEvaluationTemplate();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Number');
            }
            if (data.hasOwnProperty('taskTypes')) {
                obj['taskTypes'] = ApiClient.convertToType(data['taskTypes'], [ApiTaskType]);
            }
            if (data.hasOwnProperty('taskGroups')) {
                obj['taskGroups'] = ApiClient.convertToType(data['taskGroups'], [ApiTaskGroup]);
            }
            if (data.hasOwnProperty('tasks')) {
                obj['tasks'] = ApiClient.convertToType(data['tasks'], [ApiTaskTemplate]);
            }
            if (data.hasOwnProperty('teams')) {
                obj['teams'] = ApiClient.convertToType(data['teams'], [ApiTeam]);
            }
            if (data.hasOwnProperty('teamGroups')) {
                obj['teamGroups'] = ApiClient.convertToType(data['teamGroups'], [ApiTeamGroup]);
            }
            if (data.hasOwnProperty('judges')) {
                obj['judges'] = ApiClient.convertToType(data['judges'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiEvaluationTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiEvaluationTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiEvaluationTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['taskTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taskTypes'])) {
                throw new Error("Expected the field `taskTypes` to be an array in the JSON data but got " + data['taskTypes']);
            }
            // validate the optional field `taskTypes` (array)
            for (const item of data['taskTypes']) {
                ApiTaskType.validateJSON(item);
            };
        }
        if (data['taskGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['taskGroups'])) {
                throw new Error("Expected the field `taskGroups` to be an array in the JSON data but got " + data['taskGroups']);
            }
            // validate the optional field `taskGroups` (array)
            for (const item of data['taskGroups']) {
                ApiTaskGroup.validateJSON(item);
            };
        }
        if (data['tasks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tasks'])) {
                throw new Error("Expected the field `tasks` to be an array in the JSON data but got " + data['tasks']);
            }
            // validate the optional field `tasks` (array)
            for (const item of data['tasks']) {
                ApiTaskTemplate.validateJSON(item);
            };
        }
        if (data['teams']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teams'])) {
                throw new Error("Expected the field `teams` to be an array in the JSON data but got " + data['teams']);
            }
            // validate the optional field `teams` (array)
            for (const item of data['teams']) {
                ApiTeam.validateJSON(item);
            };
        }
        if (data['teamGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['teamGroups'])) {
                throw new Error("Expected the field `teamGroups` to be an array in the JSON data but got " + data['teamGroups']);
            }
            // validate the optional field `teamGroups` (array)
            for (const item of data['teamGroups']) {
                ApiTeamGroup.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['judges'])) {
            throw new Error("Expected the field `judges` to be an array in the JSON data but got " + data['judges']);
        }

        return true;
    }


}

ApiEvaluationTemplate.RequiredProperties = ["id", "name", "taskTypes", "taskGroups", "tasks", "teams", "teamGroups", "judges"];

/**
 * @member {String} id
 */
ApiEvaluationTemplate.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ApiEvaluationTemplate.prototype['name'] = undefined;

/**
 * @member {String} description
 */
ApiEvaluationTemplate.prototype['description'] = undefined;

/**
 * @member {Number} created
 */
ApiEvaluationTemplate.prototype['created'] = undefined;

/**
 * @member {Number} modified
 */
ApiEvaluationTemplate.prototype['modified'] = undefined;

/**
 * @member {Array.<module:model/ApiTaskType>} taskTypes
 */
ApiEvaluationTemplate.prototype['taskTypes'] = undefined;

/**
 * @member {Array.<module:model/ApiTaskGroup>} taskGroups
 */
ApiEvaluationTemplate.prototype['taskGroups'] = undefined;

/**
 * @member {Array.<module:model/ApiTaskTemplate>} tasks
 */
ApiEvaluationTemplate.prototype['tasks'] = undefined;

/**
 * @member {Array.<module:model/ApiTeam>} teams
 */
ApiEvaluationTemplate.prototype['teams'] = undefined;

/**
 * @member {Array.<module:model/ApiTeamGroup>} teamGroups
 */
ApiEvaluationTemplate.prototype['teamGroups'] = undefined;

/**
 * @member {Array.<String>} judges
 */
ApiEvaluationTemplate.prototype['judges'] = undefined;






export default ApiEvaluationTemplate;

