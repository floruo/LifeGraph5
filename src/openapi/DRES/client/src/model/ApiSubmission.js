/**
 * DRES Client API
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * The version of the OpenAPI document: 2.0.0-RC4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiAnswerSet from './ApiAnswerSet';

/**
 * The ApiSubmission model module.
 * @module model/ApiSubmission
 * @version 2.0.0-RC4
 */
class ApiSubmission {
    /**
     * Constructs a new <code>ApiSubmission</code>.
     * @alias module:model/ApiSubmission
     * @param submissionId {String} 
     * @param teamId {String} 
     * @param memberId {String} 
     * @param teamName {String} 
     * @param memberName {String} 
     * @param timestamp {Number} 
     * @param answers {Array.<module:model/ApiAnswerSet>} 
     */
    constructor(submissionId, teamId, memberId, teamName, memberName, timestamp, answers) { 
        
        ApiSubmission.initialize(this, submissionId, teamId, memberId, teamName, memberName, timestamp, answers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, submissionId, teamId, memberId, teamName, memberName, timestamp, answers) { 
        obj['submissionId'] = submissionId;
        obj['teamId'] = teamId;
        obj['memberId'] = memberId;
        obj['teamName'] = teamName;
        obj['memberName'] = memberName;
        obj['timestamp'] = timestamp;
        obj['answers'] = answers;
    }

    /**
     * Constructs a <code>ApiSubmission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiSubmission} obj Optional instance to populate.
     * @return {module:model/ApiSubmission} The populated <code>ApiSubmission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiSubmission();

            if (data.hasOwnProperty('submissionId')) {
                obj['submissionId'] = ApiClient.convertToType(data['submissionId'], 'String');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'String');
            }
            if (data.hasOwnProperty('memberId')) {
                obj['memberId'] = ApiClient.convertToType(data['memberId'], 'String');
            }
            if (data.hasOwnProperty('teamName')) {
                obj['teamName'] = ApiClient.convertToType(data['teamName'], 'String');
            }
            if (data.hasOwnProperty('memberName')) {
                obj['memberName'] = ApiClient.convertToType(data['memberName'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Number');
            }
            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], [ApiAnswerSet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiSubmission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiSubmission</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiSubmission.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['submissionId'] && !(typeof data['submissionId'] === 'string' || data['submissionId'] instanceof String)) {
            throw new Error("Expected the field `submissionId` to be a primitive type in the JSON string but got " + data['submissionId']);
        }
        // ensure the json data is a string
        if (data['teamId'] && !(typeof data['teamId'] === 'string' || data['teamId'] instanceof String)) {
            throw new Error("Expected the field `teamId` to be a primitive type in the JSON string but got " + data['teamId']);
        }
        // ensure the json data is a string
        if (data['memberId'] && !(typeof data['memberId'] === 'string' || data['memberId'] instanceof String)) {
            throw new Error("Expected the field `memberId` to be a primitive type in the JSON string but got " + data['memberId']);
        }
        // ensure the json data is a string
        if (data['teamName'] && !(typeof data['teamName'] === 'string' || data['teamName'] instanceof String)) {
            throw new Error("Expected the field `teamName` to be a primitive type in the JSON string but got " + data['teamName']);
        }
        // ensure the json data is a string
        if (data['memberName'] && !(typeof data['memberName'] === 'string' || data['memberName'] instanceof String)) {
            throw new Error("Expected the field `memberName` to be a primitive type in the JSON string but got " + data['memberName']);
        }
        if (data['answers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['answers'])) {
                throw new Error("Expected the field `answers` to be an array in the JSON data but got " + data['answers']);
            }
            // validate the optional field `answers` (array)
            for (const item of data['answers']) {
                ApiAnswerSet.validateJSON(item);
            };
        }

        return true;
    }


}

ApiSubmission.RequiredProperties = ["submissionId", "teamId", "memberId", "teamName", "memberName", "timestamp", "answers"];

/**
 * @member {String} submissionId
 */
ApiSubmission.prototype['submissionId'] = undefined;

/**
 * @member {String} teamId
 */
ApiSubmission.prototype['teamId'] = undefined;

/**
 * @member {String} memberId
 */
ApiSubmission.prototype['memberId'] = undefined;

/**
 * @member {String} teamName
 */
ApiSubmission.prototype['teamName'] = undefined;

/**
 * @member {String} memberName
 */
ApiSubmission.prototype['memberName'] = undefined;

/**
 * @member {Number} timestamp
 */
ApiSubmission.prototype['timestamp'] = undefined;

/**
 * @member {Array.<module:model/ApiAnswerSet>} answers
 */
ApiSubmission.prototype['answers'] = undefined;






export default ApiSubmission;

