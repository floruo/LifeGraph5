/**
 * DRES Client API
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * The version of the OpenAPI document: 2.0.0-RC4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiUser from './ApiUser';

/**
 * The ApiTeam model module.
 * @module model/ApiTeam
 * @version 2.0.0-RC4
 */
class ApiTeam {
    /**
     * Constructs a new <code>ApiTeam</code>.
     * @alias module:model/ApiTeam
     * @param users {Array.<module:model/ApiUser>} 
     * @param teamId {String} 
     */
    constructor(users, teamId) { 
        
        ApiTeam.initialize(this, users, teamId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, users, teamId) { 
        obj['users'] = users;
        obj['teamId'] = teamId;
    }

    /**
     * Constructs a <code>ApiTeam</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiTeam} obj Optional instance to populate.
     * @return {module:model/ApiTeam} The populated <code>ApiTeam</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiTeam();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [ApiUser]);
            }
            if (data.hasOwnProperty('logoData')) {
                obj['logoData'] = ApiClient.convertToType(data['logoData'], 'String');
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiTeam</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiTeam</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiTeam.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                ApiUser.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['logoData'] && !(typeof data['logoData'] === 'string' || data['logoData'] instanceof String)) {
            throw new Error("Expected the field `logoData` to be a primitive type in the JSON string but got " + data['logoData']);
        }
        // ensure the json data is a string
        if (data['teamId'] && !(typeof data['teamId'] === 'string' || data['teamId'] instanceof String)) {
            throw new Error("Expected the field `teamId` to be a primitive type in the JSON string but got " + data['teamId']);
        }

        return true;
    }


}

ApiTeam.RequiredProperties = ["users", "teamId"];

/**
 * @member {String} id
 */
ApiTeam.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ApiTeam.prototype['name'] = undefined;

/**
 * @member {String} color
 */
ApiTeam.prototype['color'] = undefined;

/**
 * @member {Array.<module:model/ApiUser>} users
 */
ApiTeam.prototype['users'] = undefined;

/**
 * @member {String} logoData
 */
ApiTeam.prototype['logoData'] = undefined;

/**
 * @member {String} teamId
 */
ApiTeam.prototype['teamId'] = undefined;






export default ApiTeam;

