/**
 * DRES Client API
 * Client API for DRES (Distributed Retrieval Evaluation Server), Version 2.0.0-RC4
 *
 * The version of the OpenAPI document: 2.0.0-RC4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiHint from './ApiHint';
import ApiTarget from './ApiTarget';

/**
 * The ApiTaskTemplate model module.
 * @module model/ApiTaskTemplate
 * @version 2.0.0-RC4
 */
class ApiTaskTemplate {
    /**
     * Constructs a new <code>ApiTaskTemplate</code>.
     * @alias module:model/ApiTaskTemplate
     * @param name {String} 
     * @param taskGroup {String} 
     * @param taskType {String} 
     * @param duration {Number} 
     * @param collectionId {String} 
     * @param targets {Array.<module:model/ApiTarget>} 
     * @param hints {Array.<module:model/ApiHint>} 
     */
    constructor(name, taskGroup, taskType, duration, collectionId, targets, hints) { 
        
        ApiTaskTemplate.initialize(this, name, taskGroup, taskType, duration, collectionId, targets, hints);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, taskGroup, taskType, duration, collectionId, targets, hints) { 
        obj['name'] = name;
        obj['taskGroup'] = taskGroup;
        obj['taskType'] = taskType;
        obj['duration'] = duration;
        obj['collectionId'] = collectionId;
        obj['targets'] = targets;
        obj['hints'] = hints;
    }

    /**
     * Constructs a <code>ApiTaskTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiTaskTemplate} obj Optional instance to populate.
     * @return {module:model/ApiTaskTemplate} The populated <code>ApiTaskTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiTaskTemplate();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('taskGroup')) {
                obj['taskGroup'] = ApiClient.convertToType(data['taskGroup'], 'String');
            }
            if (data.hasOwnProperty('taskType')) {
                obj['taskType'] = ApiClient.convertToType(data['taskType'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('collectionId')) {
                obj['collectionId'] = ApiClient.convertToType(data['collectionId'], 'String');
            }
            if (data.hasOwnProperty('targets')) {
                obj['targets'] = ApiClient.convertToType(data['targets'], [ApiTarget]);
            }
            if (data.hasOwnProperty('hints')) {
                obj['hints'] = ApiClient.convertToType(data['hints'], [ApiHint]);
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiTaskTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiTaskTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiTaskTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['taskGroup'] && !(typeof data['taskGroup'] === 'string' || data['taskGroup'] instanceof String)) {
            throw new Error("Expected the field `taskGroup` to be a primitive type in the JSON string but got " + data['taskGroup']);
        }
        // ensure the json data is a string
        if (data['taskType'] && !(typeof data['taskType'] === 'string' || data['taskType'] instanceof String)) {
            throw new Error("Expected the field `taskType` to be a primitive type in the JSON string but got " + data['taskType']);
        }
        // ensure the json data is a string
        if (data['collectionId'] && !(typeof data['collectionId'] === 'string' || data['collectionId'] instanceof String)) {
            throw new Error("Expected the field `collectionId` to be a primitive type in the JSON string but got " + data['collectionId']);
        }
        if (data['targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['targets'])) {
                throw new Error("Expected the field `targets` to be an array in the JSON data but got " + data['targets']);
            }
            // validate the optional field `targets` (array)
            for (const item of data['targets']) {
                ApiTarget.validateJSON(item);
            };
        }
        if (data['hints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['hints'])) {
                throw new Error("Expected the field `hints` to be an array in the JSON data but got " + data['hints']);
            }
            // validate the optional field `hints` (array)
            for (const item of data['hints']) {
                ApiHint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['comment'] && !(typeof data['comment'] === 'string' || data['comment'] instanceof String)) {
            throw new Error("Expected the field `comment` to be a primitive type in the JSON string but got " + data['comment']);
        }

        return true;
    }


}

ApiTaskTemplate.RequiredProperties = ["name", "taskGroup", "taskType", "duration", "collectionId", "targets", "hints"];

/**
 * @member {String} id
 */
ApiTaskTemplate.prototype['id'] = undefined;

/**
 * @member {String} name
 */
ApiTaskTemplate.prototype['name'] = undefined;

/**
 * @member {String} taskGroup
 */
ApiTaskTemplate.prototype['taskGroup'] = undefined;

/**
 * @member {String} taskType
 */
ApiTaskTemplate.prototype['taskType'] = undefined;

/**
 * @member {Number} duration
 */
ApiTaskTemplate.prototype['duration'] = undefined;

/**
 * @member {String} collectionId
 */
ApiTaskTemplate.prototype['collectionId'] = undefined;

/**
 * @member {Array.<module:model/ApiTarget>} targets
 */
ApiTaskTemplate.prototype['targets'] = undefined;

/**
 * @member {Array.<module:model/ApiHint>} hints
 */
ApiTaskTemplate.prototype['hints'] = undefined;

/**
 * @member {String} comment
 */
ApiTaskTemplate.prototype['comment'] = undefined;






export default ApiTaskTemplate;

